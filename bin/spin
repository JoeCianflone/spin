#!/usr/bin/env bash

# set -x
set -e

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
SPIN_HOME=$(dirname "$SCRIPT_DIR") #Assume the parent directory of this script is the home
SPIN_CACHE_DIR=${SPIN_CACHE_DIR:-$SPIN_HOME/cache}
AUTO_UPDATE_INTERVAL_IN_DAYS=${AUTO_UPDATE_INTERVAL_IN_DAYS:-14}
AUTO_PULL_INTERVAL_IN_DAYS=${AUTO_UPDATE_PULL_IN_DAYS:-1}


# Sanity Check
if ! docker info > /dev/null 2>&1; then
  printf "${BOLD}${RED}‚ùå Docker is not running.${RESET} "
  printf "You need to start Docker Desktop or install Docker before using \"spin\".\n"
  exit 1
fi

# Import common functions
source "$SPIN_HOME/lib/functions.sh"

main() {
  ## Set defaults for our environment

  # Select environments to be used
  # Allows passing as `ENV` environment variable
  # or defaults to `dev`
  SPIN_ENV=${SPIN_ENV:-dev}

  # Convert the SPIN_ENV variable into an array of environments
  IFS=',' read -ra ENV_ARRAY <<< "$SPIN_ENV"

  # Initialize the COMPOSE_FILE variable
  COMPOSE_FILE="docker-compose.yml"

  # Loop over each environment and append the corresponding compose file
  for env in "${ENV_ARRAY[@]}"; do
    COMPOSE_FILE="$COMPOSE_FILE:docker-compose.$env.yml"
  done

  # Export the COMPOSE_FILE variable
  export COMPOSE_FILE

  # Export the Spin USER IDs
  export SPIN_USER_ID=$(id -u)
  export SPIN_GROUP_ID=$(id -g)

  case "$1" in
    "" | debug | help | kill | prune | version)
      : # Silent output for the user, but we're skipping the compose check too.
      ;;
    *)
      check_if_compose_files_exist "$COMPOSE_FILE"
      ;;
  esac


  # Set up our structure for our re-used commands
  export COMPOSE_CMD=${COMPOSE_CMD:-"docker compose"}
 
  # Check that an argument is passed
  if [ $# -gt 0 ]; then
    local action=$1
    shift 1 # Remove the action from the arguments

    case $action in
      build)
        source "$SPIN_HOME/lib/actions/build.sh"
        action_build "$@"
      ;;
      debug)
        source "$SPIN_HOME/lib/actions/debug.sh"
        action_debug "$@"
      ;;
      down)
        source "$SPIN_HOME/lib/actions/down.sh"
        action_down "$@"
      ;;
      exec)
        source "$SPIN_HOME/lib/actions/exec.sh"
        action_exec "$@"
      ;;
      help)
        source "$SPIN_HOME/lib/actions/help.sh"
        action_help
      ;;
      kill)
        source "$SPIN_HOME/lib/actions/kill.sh"
        action_kill
      ;;
      latest)
        source "$SPIN_HOME/lib/actions/latest.sh"
        action_latest "$@"
      ;;
      logs)
        source "$SPIN_HOME/lib/actions/logs.sh"
        action_logs "$@"
      ;;
      new)
        source "$SPIN_HOME/lib/actions/new.sh"
        action_new "$@"
      ;;
      prune)
        source "$SPIN_HOME/lib/actions/prune.sh"
        action_prune "$@"
      ;;
      pull)
        source "$SPIN_HOME/lib/actions/pull.sh"
        action_pull "$@"
      ;;
      run)
        source "$SPIN_HOME/lib/actions/run.sh"
        action_run "$@"
      ;;
      stop)
        source "$SPIN_HOME/lib/actions/stop.sh"
        action_stop
      ;;
      up)
        source "$SPIN_HOME/lib/actions/up.sh"
        action_up "$@"
      ;;
      update)
        source "$SPIN_HOME/lib/actions/update.sh"
        action_update
      ;;
      version)
        source "$SPIN_HOME/lib/actions/version.sh"
        action_version
      ;;
      *)
        echo "\"$1\" is not a valid command. Below are the commands available."
        source "$SPIN_HOME/lib/actions/help.sh"
        action_help
      ;;
    esac
  else
    printf "${BOLD}${YELLOW}ü§î You didn't pass \"spin\" any arguments.${RESET}"
    echo
    source "$SPIN_HOME/lib/actions/help.sh"
    action_help
  fi
}

################################################
# üöÄ Where the script actually starts
################################################

setup_color

installation_type=$(detect_installation_type)
if [[ $installation_type != "development" && "$1" != "update" ]]; then
  check_for_upgrade
fi

unset installation_type

main "$@" #Passing the original arguments to `main`