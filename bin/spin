#!/usr/bin/env bash

# set -o xtrace

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
SPIN_HOME=$(dirname "$SCRIPT_DIR") #Assume the parent directory of this script is the home
AUTO_UPDATE_INTERVAL_IN_DAYS=${AUTO_UPDATE_INTERVAL_IN_DAYS:-14}
SPIN_CONFIG_FILE_LOCATION="$SPIN_HOME/conf/spin.conf"


# Sanity Check
if ! docker info > /dev/null 2>&1; then
  printf "${BOLD}${RED}‚ùå Docker is not running.${RESET} "
  printf "You need to start Docker Desktop or install it before using \"spin\".\n"
  exit 1
fi

# Import common functions
source "$SPIN_HOME/lib/functions.sh"

main() {
  ## Set defaults for our environment

  # Select environment to be used, 
  # Allows passing as `ENV` environment variable,
  # or defaults to `dev`
  SPIN_ENV=${SPIN_ENV:-dev}

  # Export the compose file(s) to be used
  # Allows overriding with standard `COMPOSE_FILE` environment variable
  # or defaults to building compound from base and environment files
  export COMPOSE_FILE=${COMPOSE_FILE:-"docker-compose.yml:docker-compose.$SPIN_ENV.yml"}

  # Set up our structure for our re-used commands
  COMPOSE="docker compose"
 
  # Check that an argument is passed
  if [ $# -gt 0 ]; then
    # Check the first argument and pass the user to proper action, Only some actions need arguments passed.
    case $1 in
      build)
        source "$SPIN_HOME/actions/build.sh"
        action_build "$@"
      ;;
      debug)
        source "$SPIN_HOME/actions/debug.sh"
        action_debug "$@"
      ;;
      down)
        source "$SPIN_HOME/actions/down.sh"
        action_down "$@"
      ;;
      exec)
        source "$SPIN_HOME/actions/exec.sh"
        action_exec "$@"
      ;;
      help)
        source "$SPIN_HOME/actions/help.sh"
        action_help
      ;;
      kill)
        source "$SPIN_HOME/actions/kill.sh"
        action_kill
      ;;
      logs)
        source "$SPIN_HOME/actions/logs.sh"
        action_logs "$@"
      ;;
      new)
        source "$SPIN_HOME/actions/new.sh"
        action_new "$@"
      ;;
      run)
        source "$SPIN_HOME/actions/run.sh"
        action_run "$@"
      ;;
      stop)
        source "$SPIN_HOME/actions/stop.sh"
        action_stop
      ;;
      up)
        source "$SPIN_HOME/actions/up.sh"
        action_up "$@"
      ;;
      update)
        source "$SPIN_HOME/actions/update.sh"
        action_update
      ;;
      version)
        source "$SPIN_HOME/actions/version.sh"
        action_version
      ;;
      *)
        echo "\"$1\" is not a valid command. Below are the commands available."
        action_help
      ;;
    esac
  else
    printf "${BOLD}${YELLOW}\ü§î You didn't pass \"spin\" any arguments. Run \"spin help\" if you want to see the documentation.${RESET}"
  fi
}

################################################
# üöÄ Where the script actually starts
################################################

setup_color

if is_installed_to_user; then
  # Prevent "spin update" from running updates twice
  if [ "$1" != "update" ]; then
    check_for_upgrade
  fi
fi

main "$@" #Passing the original arguments to `main`